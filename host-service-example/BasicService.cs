using System.Diagnostics;
using System.Runtime.InteropServices;
using System.ServiceModel;
using System.ServiceProcess;
using Warden.Core;
using Warden.Monitor;

namespace ServiceExample
{
    /// <summary>
    ///     Encapsulates the local service which depends on Rainway.
    /// </summary>
    public sealed class BasicService : ServiceBase
    {
        /// <summary>
        /// The name of the source associated with events generated by <see cref="BasicService"/> when sent to Event Viewer
        /// </summary>
        private const string EventSource = "BasicServiceHandler";

        /// <summary>
        /// Commandline arguments that were passed to the service concatenated to a single string.
        /// </summary>
        private string _arguments = string.Empty;

        /// <summary>
        /// Invoked when the Service Control Manager (SCM) starts our service.
        /// </summary>
        /// <param name="args">Arguments passed with the service start command.</param>
        protected override void OnStart(string[] args)
        {
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                if (!EventLog.SourceExists(EventSource))
                {
                    // create a new source of events so we can trace what is happening in the service.
                    EventLog.CreateEventSource(EventSource, "Application");
                }
                // this is necessary so the SCM believes the service started.
                base.OnStart(args);
                // we join the args the SCM provided as a single string so they can be passed to Warden.
                // we must escape the arguments because the ones passed in are already processed and Environment.Commandline is empty.
                _arguments = args.EscapeArguments();
                // we need to fire-and-forget here otherwise the SCM complains the service is taking too long to start.
                Task.Run(CreateInteractiveService);
            }
        }

        /// <summary>
        ///     Recreate the current process as the current interactive user.
        /// </summary>
        /// <exception cref="ServiceActivationException">Raised when the service fails to launch as the current user.</exception>
        /// <remarks>
        ///     This is necessary so that Rainway is able to capture / interact with secure desktops such as UAC or the Windows
        ///     login.
        /// </remarks>
        public async Task CreateInteractiveService()
        {
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                // We have to delay here for a moment or the SCM raises an error that the "service could not be started." 
                await Task.Delay(2000);
                EventLog.WriteEntry(EventSource, "interactive service creation underway", EventLogEntryType.Information);
                // We are recreating the current process under the context of the current interactive user
                var self = Environment.ProcessPath;
                if (string.IsNullOrWhiteSpace(self))
                {
                    const string reason = "unable to locate process path of the current service";
                    EventLog.WriteEntry(EventSource, reason, EventLogEntryType.Error);
                    throw new FileNotFoundException(reason);
                }
                var workingDirectory = AppContext.BaseDirectory;
                if (string.IsNullOrWhiteSpace(workingDirectory))
                {
                    const string reason = "unable to locate working directory of the current service";
                    EventLog.WriteEntry(EventSource, reason, EventLogEntryType.Error);
                    throw new DirectoryNotFoundException(reason);
                }
                var wardenStartInfo = new WardenStartInfo
                {
                    FileName = self,
                    WorkingDirectory = workingDirectory,
                    Arguments = _arguments,
                    RaisePrivileges = true,
                    Track = false
                };
                EventLog.WriteEntry(EventSource, $"attempting to launch '{self} {_arguments}' into the interactive desktop", EventLogEntryType.Information);
             
                try
                {
                    // Once 'StartAsUser' returns we check if the recreated process is still alive
                    // If it exits right away it indicates the spawned process crashed.
                    using var wardenProcess = WardenProcess.StartAsUser(wardenStartInfo);
                    if (wardenProcess is null || wardenProcess.HasTreeExited)
                    {
                        string reason = $"the service could not be launched into the interactive desktop: {Marshal.GetLastWin32Error()}";
                        EventLog.WriteEntry(EventSource, reason, EventLogEntryType.Error);
                        throw new ServiceActivationException(reason);
                    }
                    // If everything is good, the current executing service / process exits, and the child is the new primary process.
                    EventLog.WriteEntry(EventSource, "Interactive service successfully created.", EventLogEntryType.Information);
                    // stop the service so the current process exits
                    Stop();
                }
                catch (Exception ex)
                {
                    EventLog.WriteEntry(EventSource, $"A fatal exception occured launching the interactive service: {Environment.NewLine}{ex}", EventLogEntryType.Error);
                    throw;
                }
            }
        }


        /// <inheritdoc/>
        protected override void OnStop()
        {
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                EventLog.WriteEntry(EventSource, "stopped original SCM service.", EventLogEntryType.Information);
                base.OnStop();
                Environment.Exit(0);
            }
        }

        private void InitializeComponent()
        {
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                CanHandleSessionChangeEvent = true;
                ServiceName = "BasicService";
            }
        }
    }
}
